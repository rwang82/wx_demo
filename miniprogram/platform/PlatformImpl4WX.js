"use strict";
var MGRPT;
(function (MGRPT) {
    var PlatformImpl4WX = (function () {
        function PlatformImpl4WX() {
        }
        PlatformImpl4WX.prototype.login = function (param) {
            wx.login({
                success: function (res) {
                    Log.i("WX login success. # code:" + res.code);
                },
                fail: function (res) {
                    Log.i("WX login failed. # code:" + res.code + ", errmsg:" + res.errMsg);
                }
            });
        };
        PlatformImpl4WX.prototype.getUserSetting = function (param) {
            wx.getSetting({
                success: function (res) {
                    if (param.success)
                        param.success(res.authSetting);
                },
                fail: function () {
                    if (param.fail)
                        param.fail();
                }
            });
        };
        PlatformImpl4WX.prototype.request = function (param, retryCount) {
            var _this = this;
            wx.request({
                url: param.url,
                data: param.data,
                header: param.header,
                method: param.method,
                dataType: param.dataType,
                success: function (res) {
                    if (res.statusCode != 200) {
                        if (param.fail) {
                            param.fail(res.statusCode, res);
                        }
                    }
                    else if (res.data) {
                        if (param.success) {
                            param.success(res.statusCode, res.data, res.header);
                        }
                    }
                    else {
                        if (param.fail) {
                            param.fail(res.statusCode, res);
                        }
                    }
                },
                fail: function () {
                    if (retryCount > 1) {
                        _this.request(param, retryCount - 1);
                    }
                    else {
                        if (param.fail) {
                            param.fail(-1, null);
                        }
                    }
                }
            });
        };
        PlatformImpl4WX.prototype.setStorage = function (key, value) {
            wx.setStorageSync(key, value);
        };
        PlatformImpl4WX.prototype.getStorage = function (key) {
            return wx.getStorageSync(key);
        };
        PlatformImpl4WX.prototype.delStorage = function (key) {
            wx.removeStorageSync(key);
        };
        return PlatformImpl4WX;
    }());
    MGRPT.PlatformImpl4WX = PlatformImpl4WX;
})(MGRPT || (MGRPT = {}));
//# sourceMappingURL=data:application/json;base64,